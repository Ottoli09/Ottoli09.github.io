<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[kms服务器的搭建及使用]]></title>
    <url>%2F2019%2F08%2F08%2Fkms%2F</url>
    <content type="text"><![CDATA[注意用根据此教程搭建的 kms 服务器激活 Windows、Office 产品并不是正版，需要正版软件请到微软商城购买。本人拥有正版 Windows 10及正版 Office 365 订阅，本文探讨内容仅为研究学习之用。 前言kms 大家都很熟悉，微软产品的大批量激活手段，微软推出 kms 是为了更好地遏制盗版软件（hhhhhh……）。 但说实话，最初认识 kms 是从盗版软件开始的，网络上有很多kms激活工具，它们功能强大、操作简单，简单点几下就能完美激活 Windows、Office 各种版本。最初我甚至以为 kms 是一个破解软件的方案…… 但随着深入了解才发现事情不是那么简单。kms ( Key Management Service ) 实际上是微软官方推出的针对大客户的大批量激活工具，比如一个公司中，可能有上百台电脑，公司为他们统一购置了正版的 Windows 系统和 Office 套件。把这些电脑组成网络，中间设置一台 kms 服务器，微软将授权信息记录在 kms 服务器中，然后用 kms 服务器就可以方便地快速对网络中的计算机配置正版软件。 想法是好的，这比 xp 时代的静态序列号激活要安全多了，但是这个设计有一个漏洞，就是在激活过程中，用户计算机只需要与局域网中的 kms 连接验证授权信息，而不需要向 Microsoft 服务器进行验证。所以一旦 kms 服务器的搭建被取消限制，激活微软软件就易如反掌。 常见的 win 端 kms 激活软件的基本原理就是在本机创建一个 kms server 虚拟机，然后对软件进行授权验证，一般一次只能激活180天，180天后自动续期。 vlmcsdvlmcsd 是用 C 语言开发的开源 kms 服务器（以下内容摘译自 vlmcsd发布页） 它支持的运行环境有： Linux, GNU/Linux, uclibc/Linux, musl/Linux, Android (bionic/Linux), FreeBSD, FreeBSD with glibc (e.g. debian/kFreeBSD), OpenBSD, NetBSD, DragonflyBSD, Solaris, Open Indiana, Dyson, Minix, Darwin, Mac OS, iOS, Windows, Cygwin, WSL, Wine, The Hurd. 它支持的 CPU 架构有： x86, arm, mips, PowerPC, Sparc, s390 它的开发初衷为： 帮助例如更换主板或硬盘而失去激活许可证的人群 vlmcsd is intended to help people who lost activation of their legally-owned licenses, e.g. due to a change of hardware (motherboard, CPU, …) 而不是： 为了成为一个获取盗版软件的一键激活工具 vlmcsd is not a one-click activation or crack tool, intended to activate illegal copies of software (Windows, Office, Project, Visio) vlmcsd 的下载： Source and binaries: upload.ee and rgho.stSource only: rgho.st and upload.ee 7z password is 2018 Source and binaries checksums:SHA256: ce9faa9e2286f5d282f296b23b98781787f872b970dccfad561b477c818edf71SHA1: dbd942e1a9187a7c4e178a406d7f418d09f5eb08MD5: e7943f5daa16369aace29c1e50dc64f2 服务器的安装可以看到，vlmcsd 可以安装到 pc 上、服务器上、手机上，甚至树莓派、路由器，几乎任何你能想得到的连网设备上。 我有一个小鸡服务器，挂了一个小破站，平时负载也不大，kms 就挂到它身上吧。 首先查看一下服务器 CPU 架构： 1cat /proc/cpuinfo 嗯，是 Intel 没错了，一般都是 intel 然后下载 vlmcsd 项目文件： 12yum -y install wget wget https://github.com/Wind4/vlmcsd/releases/download/svn1111/binaries.tar.gz 然后将文件解压： 1tar -xzvf binaries.tar.gz 关于tar命令 参linux tar.gz zip 解压缩 压缩命令 切换到 intel CPU 对应的文件夹： 1cd binaries/Linux/intel/static vlmcsd，启动！ 1./vlmcsd-x64-musl-static 这时应该就已经配置完成了，可以查看一下 vlmcsd 的运行情况： 1ps -ef | grep vlmcsd-x64-musl-static 看到类似如下情况，说明运行正常： 如需关闭 vlmcsd，则输入命令： 1kill -9 上图使用psef命令回显的vlmcsd进程ID 最后需要注意的是，vlmcsd 需要使用1688端口，注意开放端口。 绑定域名为了优雅地使用kms服务器，绑定域名是必不可少的，只需要将想要绑定的域名解析到服务器ip就行了。 在域名解析记录中添加一个A类记录，记录值填写服务器ip，不需要写端口号，我绑定的域名是 kms.ottoli.cn （如图） 此时使用 kms.ottoli.cn 就可以激活软件了，但是如果直接在浏览器中访问这个地址，会提示无法访问，有点难受。 于是在服务器建个页面，留了行字，hh。 KMS 服务器的使用激活 Windows首先，目前的 Windows 必须是 VL 版本才可以使用 kms 激活，如果不是 VL 版本，则需要更换密钥。 在 cmd 中运行以下命令查看系统版本： 1wmic os get caption 在下面列表中找到对应的KEY： 点击打开列表 操作系统KMS 激活序列号 Windows 10 ProW269N-WFGWX-YVC9B-4J6C9-T83GX Windows 10 Pro NMH37W-N47XK-V7XM9-C7227-GCQG9 Windows 10 Pro WorkstationsNRG8B-VKK3Q-CXVCJ-9G2XF-6Q84J Windows 10 Pro Workstations N9FNHH-K3HBT-3W4TD-6383H-6XYWF Windows 10 Pro Education6TP4R-GNPTD-KYYHQ-7B7DP-J447Y Windows 10 Pro Education NYVWGF-BXNMC-HTQYQ-CPQ99-66QFC Windows 10 EducationNW6C2-QMPVW-D7KKK-3GKT6-VCFB2 Windows 10 Education N2WH4N-8QGBV-H22JP-CT43Q-MDWWJ Windows 10 EnterpriseNPPR9-FWDCX-D2C8J-H872K-2YT43 Windows 10 Enterprise NDPH2V-TTNVB-4X9Q3-TJR4H-KHJW4 Windows 10 Enterprise GYYVX9-NTFWV-6MDM3-9PT4T-4M68B Windows 10 Enterprise G N44RPN-FTY23-9VTTB-MP9BX-T84FV Windows 10 Enterprise LTSC 2019M7XTQ-FN8P6-TTKYV-9D4CC-J462D Windows 10 Enterprise N LTSC 201992NFX-8DJQP-P6BBQ-THF9C-7CG2H Windows 10 Enterprise LTSB 2016DCPHK-NFMTC-H88MJ-PFHPY-QJ4BJ Windows 10 Enterprise N LTSB 2016QFFDN-GRT3P-VKWWX-X7T3R-8B639 Windows 10 Enterprise LTSB 2015WNMTR-4C88C-JK8YV-HQ7T2-76DF9 Windows 10 Enterprise N LTSB 20152F77B-TNFGY-69QQF-B8YKP-D69TJ Windows 8.1 ProGCRJD-8NW9H-F2CDX-CCM8D-9D6T9 Windows 8.1 Pro NHMCNV-VVBFX-7HMBH-CTY9B-B4FXY Windows 8.1 EnterpriseMHF9N-XY6XB-WVXMC-BTDCT-MKKG7 Windows 8.1 Enterprise NTT4HM-HN7YT-62K67-RGRQJ-JFFXW Windows 8 ProNG4HW-VH26C-733KW-K6F98-J8CK4 Windows 8 Pro NXCVCF-2NXM9-723PB-MHCB7-2RYQQ Windows 8 Enterprise32JNW-9KQ84-P47T8-D8GGY-CWCK7 Windows 8 Enterprise NJMNMF-RHW7P-DMY6X-RF3DR-X2BQT Windows 7 ProfessionalFJ82H-XT6CR-J8D7P-XQJJ2-GPDD4 Windows 7 Professional NMRPKT-YTG23-K7D7T-X2JMM-QY7MG Windows 7 Professional EW82YF-2Q76Y-63HXB-FGJG9-GF7QX Windows 7 Enterprise33PXH-7Y6KF-2VJC9-XBBR8-HVTHH Windows 7 Enterprise NYDRBP-3D83W-TY26F-D46B2-XCKRJ Windows 7 Enterprise EC29WB-22CC8-VJ326-GHFJW-H9DH4 Windows Server 2019 DatacenterWMDGN-G9PQG-XVVXX-R3X43-63DFG Windows Server 2019 StandardN69G4-B89J2-4G8F4-WWYCC-J464C Windows Server 2019 EssentialsWVDHN-86M7X-466P6-VHXV7-YY726 Windows Server 2016 DatacenterCB7KF-BWN84-R7R2Y-793K2-8XDDG Windows Server 2016 StandardWC2BQ-8NRM3-FDDYY-2BFGV-KHKQY Windows Server 2016 EssentialsJCKRF-N37P4-C2D82-9YXRT-4M63B Windows Server 2012 R2 DatacenterW3GGN-FT8W3-Y4M27-J84CP-Q3VJ9 Windows Server 2012 R2 StandardD2N9P-3P6X9-2R39C-7RTCD-MDVJX Windows Server 2012 R2 EssentialsKNC87-3J2TX-XB4WP-VCPJV-M4FWM Windows Server 2012BN3D2-R7TKB-3YPBD-8DRP2-27GG4 Windows Server 2012 N8N2M2-HWPGY-7PGT9-HGDD8-GVGGY Windows Server 2012 Single Language2WN2H-YGCQR-KFX6K-CD6TF-84YXQ Windows Server 2012 Country Specific4K36P-JN4VD-GDC6V-KDT89-DYFKP Windows Server 2012 StandardXC9B7-NBPP2-83J2H-RHMBY-92BT4 Windows Server 2012 MultiPoint StandardHM7DN-YVMH3-46JC3-XYTG7-CYQJJ Windows Server 2012 MultiPoint PremiumXNH6W-2V9GX-RGJ4K-Y8X6F-QGJ2G Windows Server 2012 Datacenter48HP8-DN98B-MYWDG-T2DCC-8W83P Windows Server 2008 R2 Web6TPJF-RBVHG-WBW2R-86QPH-6RTM4 Windows Server 2008 R2 HPC editionTT8MH-CG224-D3D7Q-498W2-9QCTX Windows Server 2008 R2 StandardYC6KT-GKW9T-YTKYR-T4X34-R7VHC Windows Server 2008 R2 Enterprise489J6-VHDMP-X63PK-3K798-CPX3Y Windows Server 2008 R2 Datacenter74YFP-3QFB3-KQT8W-PMXWJ-7M648 Windows Server 2008 R2 for Itanium-based SystemsGT63C-RJFQ3-4GMB6-BRFB9-CB83V Windows Web Server 2008WYR28-R7TFJ-3X2YQ-YCY4H-M249D Windows Server 2008 StandardTM24T-X9RMF-VWXK6-X8JC9-BFGM2 Windows Server 2008 Standard without Hyper-VW7VD6-7JFBR-RX26B-YKQ3Y-6FFFJ Windows Server 2008 EnterpriseYQGMW-MPWTJ-34KDK-48M3W-X4Q6V Windows Server 2008 Enterprise without Hyper-V39BXF-X8Q23-P2WWT-38T2F-G3FPG Windows Server 2008 HPCRCTX3-KWVHP-BR6TB-RB6DM-6X7HP Windows Server 2008 Datacenter7M67G-PC374-GR742-YH8V4-TCBY3 Windows Server 2008 Datacenter without Hyper-V22XQ2-VRXRG-P8D42-K34TD-G3QQC Windows Server 2008 for Itanium-Based Systems4DWFP-JF3DJ-B7DTH-78FJB-PDRHK Windows Server Datacenter, version 1809/19036NMRW-2C8FM-D24W7-TQWMY-CWH2D Windows Server Standard, version 1809/1903N2KJX-J94YW-TQVFB-DG9YT-724CC Windows Server Datacenter, version 18032HXDN-KRXHB-GPYC7-YCKFJ-7FVDG Windows Server Standard, version 1803PTXN8-JFHJM-4WC78-MPCBR-9W4KR Windows Server Datacenter, version 17096Y6KB-N82V8-D8CQV-23MJW-BWTG6 Windows Server Standard, version 1709DPCNP-XQFKJ-BJF7R-FRC8D-GF6G4 然后以管理员身份运行 cmd ，依次执行以下三条命令 123slmgr.vbs /ipk XXXXX-XXXXX-XXXXX-XXXXX-XXXXX(KMS 密钥)slmgr.vbs /skms kms.ottoli.cn(KMS 服务器地址)slmgr.vbs /ato 这样 Windows 就激活完毕了，期限是180天，到期后自动续订，不需要人工干预。 另，可以用这个命令查看到期时间： 1slmgr.vbs /xpr 友情提醒对于 Windows 10，目前有数字权利激活工具，永久激活无需续期，较 kms 是更好的工具 激活 Office激活Office需要调用ospp.vbs文件，ospp.vbs 是 Office 安装目录下的一个文件，ospp 全称为：Office Software Protection Platform，Office 软件保护平台脚本。它是目前 Office 自身提供的激活管理工具。 32位Office的安装目录为：注：其中 Office 2016 是 Office16，Office 2013 是 Office15，以此类推。 C:\Program Files (x86)\Microsoft Office\Office16 64位Office的安装目录为： C:\Program Files\Microsoft Office\Office16 同Windows的激活一样，要求安装的 Office 为批量版本。 Office 2010 / 2013 对批量和零售的划分较为清楚，安装时就要确认安装的是批量版本，下面是判断批量与零售的方法： 从安装包名称判断 (仅适用于 MSDN 来源的镜像)：批量的安装包以 SW 开头；零售以语言开头，如 cn 已安装从软件判断：转到软件的产品信息页面 (就是显示是否激活的页面)，查看是否有 更改产品密钥 选项，有则为批量，没有则为零售 Office 2016 也可以使用上面的方法判断，但是 16 的零售基于 C2R ，安装后可以通过重新安装证书来更换版本 更换许可证书的命令是：其中 value 参数为 .xrm-ms 许可证路径 1ospp.vbs /inslic:value 在 C:\Program Files\Microsoft Office\root\Licenses16 目录中有各种 Office 套件以及 Word、Excel 等单个组件的各种版本的证书，搜索 kms 就可以找到所有批量版本的证书。 手动安装证书很麻烦，不推荐 推荐使用 Office Tool Plus 工具（简称 otp） 打开 otp 的激活选项卡，在 证书管理 一栏中选择带有 Volume 的证书，就是批量版本 安装好证书后，在下方列表中找到相应 KEY ： 点击打开列表 版本KMS 密钥 Office Professional Plus 2019NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP Office Standard 20196NWWJ-YQWMR-QKGCB-6TMB3-9D9HK Project Professional 2019B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B Project Standard 2019C4F7P-NCP8C-6CQPT-MQHV9-JXD2M Visio Professional 20199BGNQ-K37YR-RQHF2-38RQ3-7VCBB Visio Standard 20197TQNQ-K3YQQ-3PFH7-CCPPM-X4VQ2 Access 20199N9PT-27V4Y-VJ2PD-YXFMF-YTFQT Excel 2019TMJWT-YYNMB-3BKTF-644FC-RVXBD Outlook 20197HD7K-N4PVK-BHBCQ-YWQRW-XW4VK PowerPoint 2019RRNCX-C64HY-W2MM7-MCH9G-TJHMQ Publisher 2019G2KWX-3NW6P-PY93R-JXK2T-C9Y9V Skype for Business 2019NCJ33-JHBBY-HTK98-MYCV8-HMKHJ Word 2019PBX3G-NWMT6-Q7XBW-PYJGG-WXD33 Office Professional Plus 2016XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99 Office Mondo 2016HFTND-W9MK4-8B7MJ-B6C4G-XQBR2 Office Standard 2016JNRGM-WHDWX-FJJG3-K47QV-DRTFM Project Professional 2016YG9NW-3K39V-2T3HJ-93F3Q-G83KT Project Standard 2016GNFHQ-F6YQM-KQDGJ-327XX-KQBVC Visio Professional 2016PD3PC-RHNGV-FXJ29-8JK7D-RJRJK Visio Standard 20167WHWN-4T7MP-G96JF-G33KR-W8GF4 Access 2016GNH9Y-D2J4T-FJHGG-QRVH7-QPFDW Excel 20169C2PK-NWTVB-JMPW8-BFT28-7FTBF OneNote 2016DR92N-9HTF2-97XKM-XW2WJ-XW3J6 Outlook 2016R69KK-NTPKF-7M3Q4-QYBHW-6MT9B PowerPoint 2016J7MQP-HNJ4Y-WJ7YM-PFYGF-BY6C6 Publisher 2016F47MM-N3XJP-TQXJ9-BP99D-8K837 Skype for Business 2016869NQ-FJ69K-466HW-QYCP2-DDBV6 Word 2016WXY84-JN2Q9-RBCCQ-3Q3J3-3PFJ6 Office Professional Plus 2013YC7DK-G2NP3-2QQC3-J6H88-GVGXT Office Mondo 201342QTK-RN8M7-J3C4G-BBGYM-88CYV Office Standard 2013KBKQT-2NMXY-JJWGP-M62JB-92CD4 Project Professional 2013FN8TT-7WMH6-2D4X9-M337T-2342K Project Standard 20136NTH3-CW976-3G3Y2-JK3TX-8QHTT Visio Professional 2013C2FG9-N6J68-H8BTJ-BW3QX-RM3B3 Visio Standard 2013J484Y-4NKBF-W2HMG-DBMJC-PGWR7 Access 2013NG2JY-H4JBT-HQXYP-78QH9-4JM2D Excel 2013VGPNG-Y7HQW-9RHP7-TKPV3-BG7GB InfoPath 2013DKT8B-N7VXH-D963P-Q4PHY-F8894 Lync 20132MG3G-3BNTT-3MFW9-KDQW3-TCK7R OneNote 2013TGN6P-8MMBC-37P2F-XHXXK-P34VW Outlook 2013QPN8Q-BJBTJ-334K3-93TGY-2PMBT PowerPoint 20134NT99-8RJFH-Q2VDH-KYG2C-4RD4F Publisher 2013PN2WF-29XG2-T9HJ7-JQPJR-FCXK4 Word 20136Q7VD-NX8JD-WJ2VH-88V73-4GBJ7 Office Professional Plus 2010VYBBJ-TRJPB-QFQRF-QFT4D-H3GVB Office Mondo 2010YBJTT-JG6MD-V9Q7P-DBKXJ-38W9R Office Standard 2010V7QKV-4XVVR-XYV4D-F7DFM-8R6BM Office SmallBusBasics 2010D6QFG-VBYP2-XQHM7-J97RH-VVRCK Project Professional 2010YGX6F-PGV49-PGW3J-9BTGG-VHKC6 Project Standard 20104HP3K-88W3F-W2K3D-6677X-F9PGB Visio Premium 2010D9DWC-HPYVV-JGF4P-BTWQB-WX8BJ Visio Professional 20107MCW8-VRQVK-G677T-PDJCM-Q8TCP Visio Standard 2010767HD-QGMWX-8QTDB-9G3R2-KHFGJ Access 2010V7Y44-9T38C-R2VJK-666HK-T7DDX Excel 2010H62QG-HXVKF-PP4HP-66KMR-CW9BM Groove 2010QYYW6-QP4CB-MBV6G-HYMCJ-4T3J4 InfoPath 2010K96W8-67RPQ-62T9Y-J8FQJ-BT37T OneNote 2010Q4Y4M-RHWJM-PY37F-MTKWH-D3XHX Outlook 20107YDC2-CWM8M-RRTJC-8MDVC-X3DWQ PowerPoint 2010RC8FX-88JRY-3PF7C-X8P67-P4VTT Publisher 2010BFK7F-9MYHM-V68C7-DRQ66-83YTP Word 2010HVHB3-C6FV7-KQX9W-YQG79-CRY7T 然后以管理员身份运行 cmd ，需要依次执行三条命令。 需要注意的是，激活 Office 调用 ospp.vbs ，于是需要先切换 cd 到 Office 安装目录：根据自己的软件版本写目录 1cd "C:/Program Files/Microsoft Office/Office16" 然后依次执行以下三条命令： 123cscript "ospp.vbs" /inpkey:XXXXX-XXXXX-XXXXX-XXXXX-XXXXX(KMS 密钥)cscript "ospp.vbs" /sethst:kms.ottoli.cn(KMS 服务器地址)cscript "ospp.vbs" /act 这样 Office 就激活完毕了，期限是180天，到期后自动续订，不需要人工干预。 不过，既然已经安装了 otp，以上三条命令也可以用 otp 来实现： 另，可以用这个命令查询已安装的许可证： 1cscript "ospp.vbs" /dstatus 用这个命令删除已安装的许可证：其中xxxxx为要卸载的许可证后五位 1cscript "ospp.vbs" /unpkey:xxxxx 当然，这两个命令也可以用 otp 实现。 本篇文章参考以下文章： 自建KMS激活服务器：CentOS安装vlmcsd搭建 使用 KMS 激活 Microsoft 产品 [vlmcsd发布页]Emulated KMS Servers on non-Windows platforms KMS一键激活Windows所有版本、office所有版本、一句命令激活WINDOWS ospp.vbs是什么文件？激活过程cscript ospp.vbs命令详解]]></content>
      <categories>
        <category>记录</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[用Visual Studio Code 配置C/C++开发环境]]></title>
    <url>%2F2019%2F08%2F07%2Fvscodec%2F</url>
    <content type="text"><![CDATA[本篇文章参考以下文章： Visual Studio Code 配置C/C++环境 Visual Studio Code 是微软开发的针对于编写现代 Web 和云应用的跨平台源代码编辑器，功能强大,操作简单便捷,还有着良好的用户界面,设计得很人性化。 Visual Studio Code 的安装Visual Studio Code 是免费的，在官网下载最新版本就行了：https://code.visualstudio.com/ 安装过后面临的第一个的问题就是——软件是英文的。对于英语菜得抠脚的我来说，这很致命。但是好在vscode 有着丰富的插件库，可以通过插件配置软件语言。 点击左侧“扩展”一栏，搜索Chinese，安装第一个插件Chinese (Simplified) Language Pack for Visual Studio Code就可以了 环境准备vscode 不是IDE，是不内置编译器的，因此需要下载： Clang：选择Pre-Built Binaries中的Windows (64-bit)下载 安装时添加环境变量时选择Add LLVM to the system PATH for all users。安装路径推荐填C:\Program Files\LLVM，等会就可以照搬我的c_cpp_properties.json文件。 MinGW-w64：直接点Download就行 安装时Architecture选x86_64，其余默认即可。 安装完成之后，打开MinGW的安装目录（看得到bin文件夹那一层），把全部文件复制到Clang安装目录（同样是看得到bin文件夹那一层）下，应该可以无冲突合并。合并之后就可以把MinGW卸载了。 如果没有进行这一步，c_cpp_properties.json配置里路径就自己改，还要手动把MinGW的bin文件夹加到系统环境变量中，因为MinGW不会自己加。既要装Clang又要装MinGW，是因为Clang没有头文件。 配置完成后在cmd中输入clang，如果提示no input files，则证明配置成功。 vscode 的配置插件安装 必装插件 C/C++ C/C++ Clang Command Adapter Code Runner 推荐插件 Bracket Pair Colorizer Include Autocomplete One Dark Pro Material Icon Theme 配置工作区在磁盘中创建一个打算存放代码的文件夹，注意路径中不能含有中文、空格和引号。在文件夹中创建子文件夹.vscode，注意前面有个点。Windows 10 1903版本后允许创建，如果你的系统没有及时更新，可以在vscode中创建 打开vscode，选择“打开文件夹”，打开刚刚创建的文件夹（.vscode的父文件夹）。然后在.vscode中创建四个文件：launch.json、tasks.json、settings.json、c_cpp_properties.json。 将下面的内容复制进去： launch.json12345678910111213141516171819202122232425262728// https://github.com/Microsoft/vscode-cpptools/blob/master/launch.md&#123; "version": "0.2.0", "configurations": [ &#123; "name": "(gdb) Launch", // 配置名称，将会在启动配置的下拉菜单中显示 "type": "cppdbg", // 配置类型，这里只能为cppdbg "request": "launch", // 请求配置类型，可以为launch（启动）或attach（附加） "program": "$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe", // 将要进行调试的程序的路径 "args": [], // 程序调试时传递给程序的命令行参数，一般设为空即可 "stopAtEntry": false, // 设为true时程序将暂停在程序入口处，我一般设置为true "cwd": "$&#123;workspaceFolder&#125;", // 调试程序时的工作目录 "environment": [], // （环境变量？） "externalConsole": false, // 调试时是否显示控制台窗口，一般设置为true显示控制台 "internalConsoleOptions": "neverOpen", // 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，你应该不需要对gdb手动输命令吧？ "MIMode": "gdb", // 指定连接的调试器，可以为gdb或lldb。但目前lldb在windows下没有预编译好的版本。 "miDebuggerPath": "gdb.exe", // 调试器路径。 "setupCommands": [ &#123; "description": "Enable pretty-printing for gdb", "text": "-enable-pretty-printing", "ignoreFailures": false &#125; ], "preLaunchTask": "Compile" // 调试会话开始前执行的任务，一般为编译程序。与tasks.json的label相对应 &#125; ]&#125; tasks.json123456789101112131415161718192021222324252627282930313233// https://code.visualstudio.com/docs/editor/tasks&#123; "version": "2.0.0", "tasks": [ &#123; "label": "Compile", // 任务名称，与launch.json的preLaunchTask相对应 "command": "clang++", // 要使用的编译器 "args": [ "$&#123;file&#125;", "-o", // 指定输出文件名，不加该参数则默认输出a.exe "$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe", "-g", // 生成和调试有关的信息 "-Wall", // 开启额外警告 "-static-libgcc", // 静态链接 "-fcolor-diagnostics", "--target=x86_64-w64-mingw", // 默认target为msvc，不加这一条就会找不到头文件 "-std=c++17" // C语言最新标准为c11，或根据自己的需要进行修改 ], // 编译命令参数 "type": "shell", "group": &#123; "kind": "build", "isDefault": true // 设为false可做到一个tasks.json配置多个编译指令，需要自己修改本文件，我这里不多提 &#125;, "presentation": &#123; "echo": true, "reveal": "always", // 在“终端”中显示编译信息的策略，可以为always，silent，never。具体参见VSC的文档 "focus": false, // 设为true后可以使执行task时焦点聚集在终端，但对编译c和c++来说，设为true没有意义 "panel": "shared" // 不同的文件的编译信息共享一个终端面板 &#125; // "problemMatcher":"$gcc" // 如果你不使用clang，去掉前面的注释符，并在上一条之后加个逗号。照着我的教程做的不需要改（也可以把这行删去) &#125; ]&#125; settings.json12345678910111213141516171819202122232425262728293031&#123; "files.defaultLanguage": "c", // ctrl+N新建文件后默认的语言 "editor.formatOnType": true, // 输入时就进行格式化，默认触发字符较少，分号可以触发 "editor.snippetSuggestions": "top", // snippets代码优先显示补全 "code-runner.runInTerminal": true, // 设置成false会在“输出”中输出，无法输入 "code-runner.executorMap": &#123; "c": "cd $dir &amp;&amp; clang $fileName -o $fileNameWithoutExt.exe -Wall -g -Og -static-libgcc -fcolor-diagnostics --target=x86_64-w64-mingw -std=c11 &amp;&amp; $dir$fileNameWithoutExt", "cpp": "cd $dir &amp;&amp; clang++ $fileName -o $fileNameWithoutExt.exe -Wall -g -Og -static-libgcc -fcolor-diagnostics --target=x86_64-w64-mingw -std=c++17 &amp;&amp; $dir$fileNameWithoutExt" &#125;, // 设置code runner的命令行 "code-runner.saveFileBeforeRun": true, // run code前保存 "code-runner.preserveFocus": true, // 若为false，run code后光标会聚焦到终端上。如果需要频繁输入数据可设为false "code-runner.clearPreviousOutput": false, // 每次run code前清空属于code runner的终端消息 "C_Cpp.clang_format_sortIncludes": true, // 格式化时调整include的顺序（按字母排序） "C_Cpp.intelliSenseEngine": "Default", // 可以为Default或Tag Parser，后者较老，功能较简单。具体差别参考cpptools扩展文档 "C_Cpp.errorSquiggles": "Disabled", // 因为有clang的lint，所以关掉 "C_Cpp.autocomplete": "Disabled", // 因为有clang的补全，所以关掉 "clang.cflags": [ // 控制c语言静态检测的参数 "--target=x86_64-w64-mingw", "-std=c11", "-Wall" ], "clang.cxxflags": [ // 控制c++静态检测时的参数 "--target=x86_64-w64-mingw", "-std=c++17", "-Wall" ], "clang.completion.enable":true // 效果效果比cpptools要好&#125; c_cpp_properties.json1234567891011121314151617181920212223&#123; "configurations": [ &#123; "name": "MinGW", "intelliSenseMode": "clang-x64", "compilerPath": "C:/Program Files/LLVM/bin/gcc.exe", "includePath": [ "$&#123;workspaceFolder&#125;" ], "defines": [], "browse": &#123; "path": [ "$&#123;workspaceFolder&#125;" ], "limitSymbolsToIncludedHeaders": true, "databaseFilename": "" &#125;, "cStandard": "c11", "cppStandard": "c++17" &#125; ], "version": 4&#125; 关于中文vscode 默认使用的是utf-8编码，cmd/powershell 是gbk编码，所以直接输出时中文会乱码，解决方法是： 打开 设置 - 用户(或工作区) - 文本编辑器 - 文件 - Encoding ，设置为gb2312]]></content>
      <categories>
        <category>记录</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[再看《这个杀手不太冷》]]></title>
    <url>%2F2019%2F05%2F22%2Fleon%2F</url>
    <content type="text"><![CDATA[第一次看是几年前的事了，那时定了个“神作补完计划”，立志要把广为流传的电影名作都看一遍，虽然直到现在还有好多神作都还没补，比如说早就下载好的《霸王别姬》直到现在还安安静静地呆在硬盘里，不过那些日子确实看了不少电影…… 那是个晚上，父母都去睡了，我瘫在沙发里用电视看《这个杀手不太冷》。当时觉得这个电影名字挺中二的。 现在回想，故事情节我还都记得，有几个经典镜头也还记得，之外的就没什么印象了。只是看完这电影之后，我哭成个傻逼了，我记得我妈还起来看我，说我哭个啥，赶紧看完去睡觉。但睡是不可能睡的，从那天晚上开始，我差不多难受了有一个星期吧，天天想着Leon和Mathilda，一有机会就两眼放空神情恍惚好半天…… 以至于这之后的这么多年，我萌生过很多次重看一遍的念头，但是最终都打消了。因为我害怕，那种伤心。 直到今天，我又鼓起勇气来看了它。可能是因为我鼓起了勇气，已经做好了充足的心理准备，也可能是因为我对剧情印象太过深刻，再看时已经没了新鲜感，这次我没有哭，仍然难过，但没有太过伤心。 反而，可能是因为心情相对平静，也可能是因为几年间我的审美能力也有了相当的提升，第二次看，我看到了更多的内容，欣赏到了更多的美，更加理解为什么这部电影能被称为神作。 先来个总评吧。这部电影剧情紧凑而丰满，节奏张弛有度，线索清晰，结构完整，逻辑严密。人物形象鲜明而饱满，不论是主角还是反派，抑或是配角们，都有很强的感染力和代入感。最让我着迷的是镜头和配乐。吕克贝松的镜头简直太刁钻，整部电影每一个镜头的构图、颜色、运动都堪称完美，至少有一半以上的镜头都可以直接截图当壁纸。而电影的配乐也极具感染力，跟情节完美契合，并推动情节的发展。 接下来贴图，欣赏吕克贝松的镜头，顺便回顾剧情 Leon把胖子逼到墙角 影片一开始，节奏明快地演绎了一场Leon的一次行动，只身一人潜入大楼，行动敏捷，思路清晰，手法独特，迅速干翻所有护卫。最后把胖子逼到墙角，用刀比着胖子给雇主打了电话交差。短短几分钟，一个莫的感情的职业杀手形象刻画得淋漓尽致。 Leon从黑暗中伸出一把刀，最后又消失在黑暗中，这个镜头，堪称经典。 Mathilda的出场 Mathilda的出场 Mathilda的出场 接着是Mathilda的出场，她穿着花裤子坐在走廊边上，手里拿着根烟，看到Leon上楼来，她把烟藏在腿旁边，仰过背给Leon打招呼，这身装扮，这个年龄，这个表情，这根烟，这段对话，短短几秒，Mathilda的形象交代得差不多了。 反派Stan登场 Stan嗑药 Stan开杀 Stan张开两臂 Stan在Mathilda家大杀特杀这一出戏也非常经典，Stan这个角色其实也刻画得相当好，加里·奥德曼的演技炸裂，那种癫狂的状态，演绎的非常到位。 Please！ Leon打开了门 Mathilda买完东西上楼，看到自己全家已经全数阵亡，头也没扭地就直接走到了Leon家，哭着按门铃，绝望地说着Please！ 这一段娜塔莉的演技简直炸裂！ Leon打开门，光打在Mathilda的脸上——得救了！（这个镜头会说话！） 之后的剧情我就不说了，欣赏截图： 倒牛奶 Mathilda给Leon谈条件 Leon沉思 拉手手 Leon睡觉 Matlida生气 搬家 --你能不能不要一直说Okey、Okey？--Okey.--Good. Leon感觉自己好行有点顶不住了 “你越厉害，就离敌人越近，来复枪是你要学的第一件武器，匕首是你要学的最后一件武器” 瞄准 Mathilda的眼神超帅啊 拆手枪 每天早上拿出最爱的花 Mathilda疲于训练 “不如我们玩个游戏吧” Mathilda Cosplay 1 Mathilda Cosplay 2 Mathilda Cosplay 3 这谁顶的住啊 Leon Cosplay Emmmm…… 没猜出来 超级经典镜头！！！ --不要说脏话--Okey Mathilda fell in love "I feel it in my stomach." Mathilda向Leon表白这一幕是非常美的，Mathilda平躺在床上，满脸幸福地说 “I feel it in my stomach.” Leon出门瘫在墙壁上，此时的他其实也已经动了情 看着提箱远去的Leon，Mathilda也在思考他们之间的关系 接下来剧情出现了大的转机，Mathilda偷偷回到了之前的家，听到了Stan的地址，复仇之心从此坚定，之后她用枪比着自己，逼Leon教她当一个Cleaner Mathilda重返故地 第二次搬家 "I love you, Leon." Old Tony 这一幕像极了见家长 见过Tony后，Leon带Mathilda执行了第一次任务，晚上一起破例喝酒庆祝，在吃饭时，Mathilda还是离不开爱的话题，Leon让她转移话题，Mathilda尬笑了半天，这一幕也很经典，把两人之间这种扭曲的爱情，彼此的复杂情感表达的很到位。 第一次一起执行任务 第一次射击真人 Mathilda向Leon索吻被拒 这里再插一句，Mathilda向Leon索吻被拒，Leon拒绝的理由不是别的，而是旁边都是人，都在看。他回避了真正所纠结的点，这说明此时在他心中，对Mathilda的感情已经更深一步了。 Mathilda尬笑 Mathilda尬笑 一起执行任务 一起执行任务 一起执行任务 The Ring Trick埋下伏笔 接下来是暴风雨前的宁静，Leon瞒着Mathilda去帮Mathilda处理了一个Stan的手下，而Mathilda只身一人去找Stan了。 Mathilda以为Leon不会帮她复仇，而Leon其实却背着她去帮她复仇，他们两人的行为共同引发了最后的大决战，而直到最后，Mathilda也不知道Leon最后一次其实已经开始为她复仇了。 这一处剧情的矛盾，给电影增添了许多悲剧色彩。 无所事事的Mathilda 无所事事的Mathilda 思考的Mathilda 复仇心起的Mathilda 开始行动 潜伏 观察 被威胁 Stan Mathilda差点就要死了 Leon看到Mathilda的离别信 成功救出Mathilda 意义非凡的一次拥抱 --Do you like it?--Yes.--Then say it. --I like it. Mathilda谈性 Leon讲述往事 从Leon救出Mathilda到大决战之前的这个下午和晚上，是整部电影最关键的一个情节。 Leon不顾一切地救出了Mathilda，和她久久地抱在一起，此时此刻，两人都清楚，彼此之间的关系已经快要到达临界点了。 Mathilda穿上了Leon送她的衣服，开始暗(ming)示Leon，想要和他Make Love。Leon虽然没有答应，却讲起了自己的往事。 怎么理解这个情节？ Mathilda所提出的要求对于一个甚至从未爱过的小女孩来说意味着什么？Leon讲出自己的往事对于一个隐姓埋名的职业杀手来说意味着什么？此时此刻，Mathilda已经不能再压抑自己对Leon的爱了，Leon也不想再过多地掩盖自己的情感。 在这一刻，他们彼此之间的信任，达到了最高峰。 晚上，在Mathilda的要求下，Leon第一次在床上睡了个安稳觉。 躺下睡觉 最后一个晚上 最后的大决战，我不想写了，难受 最后的对话： —我不走 我不走 I’m not going! I won’t go!—听着 听我说 Listen to me. 我们在一起没机会逃 We have no chance together. 我要自己一个人才办的到 But if I’m alone, I can do it. 相信我 我没事的 玛婷达 Trust me. I’m in good shape. 我知道我在东尼那里有很多钱 I know I’ve got a lot of money with Tony. 我们会带着那笔钱一起离开 We’ll take it and leave together, 就我们两个 好吗? 快走 just the two of us.Okay? Go.—不 你只是在说安慰我的话 You’re saying that so I won’t worry. 我不想失去你 里昂 I don’t wanna lose you.—你不会失去我的 玛婷达 You’re not gonna lose me. 你让我尝到人生的滋味 You’ve given me a taste for life. 我开始想要过的快乐 睡在床上 有牵挂 I wanna be happy, sleep in a bed, have roots. 你以后不会再觉得孤独了 玛婷达 You’ll never be alone again. 拜托 马上走 宝贝 走 Please, go now, baby. Go. 冷静点 快走 走 走 Calm down. Go now. Go. 我处理完之后就去东尼那里找你 See you at Tony’s. I’m gonna clean them all. 一个钟头之后在东尼那里 Tony’s in an hour. 我爱你 玛婷达 I love you, Mathilda.—我也爱你 里昂 I love you, too, Leon. The Ring Trick."This is from Mathilda." 最后的大决战这一段戏，其实真的有很多可以说的。刚刚不想说，现在还是想说几句。 Leon的表现可以说是完美的，从Mathilda引导敌人敲了假的暗号，Leon一个人击退了所有的敌人，还成功地将Mathilda从敌人手中救回来了。 最后L&amp;M那一段对话，一开始，我也觉得Leon是在安慰Mathilda，毕竟那么多警力，Leon无论如何也逃不出来。但是Mathilda也这样问他，说他只是在安慰她。谁知Leon说，You&#39;re not gonna lose me. You&#39;ve given me a taste for life. I wanna be happy, sleep in a bed, have roots. You&#39;ll never be alone again.，这是Leon的真心话，就像前面分析的那样，昨天晚上，他们两个人的关系几乎就只差一层窗户纸没有捅破了，此情此景，此时此刻，Leon是真的想让Mathilda先走，自己最后跟上，之后也正如Leon所说的，他确实突破了重重包围，走了出来。 当Leon走到走廊尽头时，外面的光洒在他的脸上，这呼应了开头Leon给Mathilda开门时，光洒在Mathilda的脸上。Mathilda看到的是生希望，Leon此时此刻看到的，是重生的的希望，Mathilda让他感到了the taste for life，此时的Leon已经不是影片开头那个从黑影里走出来的莫的感情的杀手了，他已经重生了，是一个“不太冷”的Leon。 但是，剧本没有让他走出那扇门，导演选择了让他死。也恰恰是Leon的死，让这部电影成为了神作。这部电影这能是一部悲剧，因为试想一下，Leon走出了那扇门，警察们落空了，Stan暴跳如雷，L&amp;M过上了美好幸福的生活，这样的结局反而会让人觉得索然无味。电影前面做了那么多铺垫，刻画出了如此曲折的感情历程，Mathilda从陌生到深深爱上一个人，Leon从抗拒到慢慢坦露心声，一切最终终于快要修得正果了，这一切得来如此之费工夫。最后的大决战，如此的艰辛曲折，好不容易逃开了重重包围，未来的生活就在眼前。但是这一切，都太珍贵了，如此珍贵之物，只有被毁掉，才会显出价值。 最后，Mathilda把Leon种在了公园中，让他有了root，Sting的Shape of My Heart响起，电影结束。观众久久难以畅怀。]]></content>
      <categories>
        <category>影评</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[html常用语法指南]]></title>
    <url>%2F2019%2F02%2F11%2Fhtml%2F</url>
    <content type="text"><![CDATA[仅仅使用Markdown来书写博客文章，在排版和美观上还是有所局限的，好在Markdown是支持html语法的，这篇文章罗列一些以Markdown为主的编辑下常用的html标签，算是我对html的学习记录，也算是以后写博客的自我参考文档 折行Markdown语法中不支持空白的行，所以若想用空行占位，可以使用html&lt;br&gt;折行标签 12341.&lt;br&gt;2.&lt;br/&gt;在 HTML 中，&lt;br&gt; 标签没有结束标签。在 XHTML 中，&lt;br&gt; 标签必须被正确地关闭，比如这样：&lt;br/&gt; 示例： 注释在hexo的NexT主题中，博客主页默认显示整篇文章，或者可以设置显示字符数 如果采用默认设置，博客主页会变得非常冗长，不易于阅读。而如果设置显示的字符数，则显示部分会不加渲染直接输出代码 好在还有第三种方法，在文章中插入一个html注释标签，注释的值为more，这样在博客主页就会将文章渲染到注释标签之前 1&lt;!-- more --&gt; 例如本篇文章： 缩写缩写其实不仅仅用于缩写，它的作用是实现鼠标悬停在某个词上时，展示一个气泡 1&lt;abbr title="HyperText Markup Language"&gt;html&lt;/abbr&gt; 示例： html 大号文本&amp;小号文本1&lt;big&gt;大号文本&lt;/big&gt; 普通文本 &lt;small&gt;小号文本&lt;/small&gt; 示例： 大号文本 普通文本 小号文本 居中文本1&lt;center&gt;居中文本&lt;/center&gt; 示例： 居中文本 字体标签123456789&lt;font color="" size=""&gt;&lt;/font&gt;color可选值:1.颜色名(如"red")2.十六进制颜色值(如"#ff0000")3.RGB颜色值(如"rgb(255,0,0)")size可选值:1-7(default=3) 示例： 123&lt;font color="#295391" size="3"&gt;Word&lt;/font&gt;&lt;br/&gt;&lt;font color="#1F6B41" size="5"&gt;Excel&lt;/font&gt;&lt;br/&gt;&lt;font color="#C44423" size="6"&gt;Power Point&lt;/font&gt; Word Excel Power Point 不知道是我操作有误，还是Markdown支持不完整，实测rgb颜色不太好使，推荐使用十六进制值 高亮Mark1&lt;mark&gt;Mark&lt;/mark&gt; Mark Meter标签123&lt;meter value="5" max="10" min="0"&gt;&lt;/meter&gt;或&lt;meter value="0.5"&gt;&lt;/meter&gt; 进程标签1&lt;progress value="33" max="100"&gt;&lt;/progress&gt; 音频标签12345&lt;audio autoplay controls loop muted&gt; &lt;source src="example.ogg" type="audio/ogg"&gt; &lt;source src="example.mp3" type="audio/mpeg"&gt; 当前浏览器不支持audio元素&lt;/audio&gt; audio属性说明： autoplay：音频在就绪后马上播放（测试不成功） controls：向用户显示音频控件 loop：循环播放 muted：默认输出为静音 source属性说明： src：文件地址，可以是url type：可不填，有资料指出&lt;audio&gt;只支持mp3、wav、ogg，但实测chrome上可以播放flac 当有多个源文件时，浏览器根据文件类型自动优先选择支持的格式 在&lt;audio&gt;和&lt;/audio&gt;之间插入文本，可在不支持&lt;audio&gt;标签的浏览器中显示 示例： 当前浏览器不支持audio元素 龙舌兰.mp3 当前浏览器不支持audio元素 明年今日.flac 视频标签1234&lt;video autoplay controls loop muted&gt; &lt;source src="example.mp4" type="video/mp4"&gt; 当前浏览器不支持video元素&lt;/video&gt; video属性说明： autoplay：视频在就绪后马上播放（测试不成功） controls：向用户显示视频控件 loop：循环播放 muted：默认输出为静音 height=”pixels“：设置视频播放器的高度 width=”pixels“：设置视频播放器的宽度 poster=”url“：规定视频正在下载时显示的图像，直到用户点击播放按钮 preload=”auto|metadata|none“： auto指示一旦页面加载，则开始加载音频/视频 metadata指示当页面加载后仅加载音频/视频的元数据 none指示页面加载后不应加载音频/视频 source属性说明： src：文件地址，可以是url type：可不填，有资料指出&lt;video&gt;只支持Mp4(H264.AAC)、WebM(VP8.Vorbis)、ogg(Theora.Vorbis)，但实际上能否解码主要由编码格式决定，而不是由容器决定，不同浏览器对编码格式的支持情况可能不足或不止以上三种情况 在&lt;video&gt;和&lt;/video&gt;之间插入文本，可在不支持&lt;video&gt;标签的浏览器中显示 示例： 当前浏览器不支持video元素 表格标签html表格标签有着非常复杂的属性项，改天有心情再仔细研究吧，这次只说说基本用法 Markdown中虽然支持生成表格，但有一个致命的弱点就是单个单元格内部不支持换行 如果需要实现单元格内换行，就只能使用html表格标签实现了 1234567891011&lt;table&gt; &lt;tr&gt; &lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;语文&lt;/th&gt;&lt;th&gt;数学&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;小明&lt;/td&gt;&lt;td&gt;86&lt;/td&gt;&lt;td&gt;73&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;小张&lt;/td&gt;&lt;td&gt;77&lt;/td&gt;&lt;td&gt;62&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 姓名语文数学 小明8673 小张7762 注释： &lt;table&gt; 标签定义 HTML 表格 &lt;tr&gt; 元素定义表格行 &lt;th&gt;元素定义表头 &lt;td&gt; 元素定义表格单元 可能未完，也许待续]]></content>
      <categories>
        <category>建站相关</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[用Markdown书写的LaTeX数学公式语法]]></title>
    <url>%2F2019%2F02%2F10%2Flatex%2F</url>
    <content type="text"><![CDATA[本篇文章参考以下两篇文章： Mathjax与LaTex公式简介、Markdown数学公式语法 以及Mathjax官方文档 用OneNote整理数学笔记时，体验过用UnicodeMath语法输入数学公式，十分爽快 LaTeX语法与UnicodeMath语法大同小异，上手很快，下面罗列出语法列表 行内与独行1.行内公式：将公式插入到本行内 1$a+b=c$ $a+b=c$ 2.独行公式：将公式插入到新的一行内，并且居中 1$$a+b=c$$ a+b=c​上标、下标与组合 上标符号x^3：$x^3$ 下标符号H_2O：$H_2O$ 组合符号{} 汉字、字体与格式 汉字形式 M_{\mbox{总}}：$M_{\mbox{总}}$ 下划线符号 \underline{} \underline{x+y} $\underline{x+y}$ 标签 \tag{} \int f(x)dx\tag{11} $\int f(x)dx \tag{11}​$ 上大括号 \overbrace{}^{} \overbrace{a+b+c+d}^{50} $\overbrace{a+b+c+d}^{50}$ 下大括号 \underbrace{}_{} a+\underbrace{b+c}_{20}+d $a+\underbrace{b+c}_{20}+d​$ 上位符号 \stackrel{}{} \stackrel{\Delta}{=} $\stackrel{\Delta}{=}$ 字体控制（行高）\displaystyle \displaystyle \int f(x)dx &amp; \int f(x)dx $\displaystyle \int f(x)dx$ &amp; $\int f(x)dx$ 字体控制 一般斜体 ABCDEFGHIJKLMNOPQRSTUVWXYZ $ABCDEFGHIJKLMNOPQRSTUVWXYZ$ abcdefghijklmnopqrstuvwxyz $abcdefghijklmnopqrstuvwxyz$ 罗马字体 \mathrm{ABCDEFGHIJKLMNOPQRSTUVWXYZ} $\mathrm{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ \mathrm{abcdefghijklmnopqrstuvwxyz} $\mathrm{abcdefghijklmnopqrstuvwxyz}$ 黑体 \mathbf{ABCDEFGHIJKLMNOPQRSTUVWXYZ} $\mathbf{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ \mathbf{abcdefghijklmnopqrstuvwxyz} $\mathbf{abcdefghijklmnopqrstuvwxyz}$ 黑板粗体 \mathbb{ABCDEFGHIJKLMNOPQRSTUVWXYZ} 或 Bbb{} $\mathbb{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ \mathbb{abcdefghijklmnopqrstuvwxyz} 或 Bbb{} $\mathbb{abcdefghijklmnopqrstuvwxyz}​$ 手写体（不支持小写，小写显示为罗马字体） \mathscr{ABCDEFGHIJKLMNOPQRSTUVWXYZ} $\mathscr{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ \mathscr{abcdefghijklmnopqrstuvwxyz} $\mathscr{abcdefghijklmnopqrstuvwxyz}$ Fraktur字体 \mathfrak{ABCDEFGHIJKLMNOPQRSTUVWXYZ} $\mathfrak{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ \mathfrak{abcdefghijklmnopqrstuvwxyz} $\mathfrak{abcdefghijklmnopqrstuvwxyz}$ 9.变体希腊字母 \epsilon \varepsilon : $\epsilon$ $\varepsilon$ \phi \varphi : $\phi$ $\varphi$ 占位符 两个quad空格 x \qquad y：$x \qquad y$ quad空格 x \quad y：$x \quad y​$ 大空格 \(空格)：$x \ y$ 中空格\:：$x \: y​$ 小空格 \,：$x \, y$ 没有空格 ：$xy$ 紧贴 \!：无法正确转义 定界符与组合 括号 () \big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg) $() \big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)$ 中括号 []： $[]$ 大括号 \{\}：无法正确转义 可使用：\lbrace\rbrace：$\lbrace\rbrace$ 尖括号 \langle\rangle：$\langle\rangle$ 上取整 \lceil\rceil：$\lceil\rceil$ 下取整 \lfloor\rfloor：$\lfloor\rfloor$ 自适应括号 \left与\right：(对尖括号、上下取整括号亦有效) \left(\displaystyle\int f(x)dx\right) $\left(\displaystyle\int f(x)dx\right)$ \left[\displaystyle\int f(x)dx\right] $\left[\displaystyle\int f(x)dx\right]$ \left\lbrace\displaystyle\int f(x)dx\right\rbrace $\left\lbrace\displaystyle\int f(x)dx\right\rbrace$ 组合公式 {aaa \choose bbb}：${aaa \choose bbb}$ 组合公式 {aaa \atop bbb}：${aaa \atop bbb}$ 四则运算 加法运算 +：$+$ 减法运算 -：$-$ 加减运算 \pm：$\pm$ 减加运算 \mp：$\mp$ 乘法运算 \times：$\times​$ 点乘运算 \cdot：$\cdot​$ 星乘运算 \ast：$\ast$ 除法运算 \div：$\div$ 斜法运算 /：$/$ 分式表示 \frac{c}{a+b}：$\frac{c}{a+b}$ 分式表示{x+y} \over {x-y}：${x+y} \over {x-y}$ 绝对值表示|x+y|：$|x+y|$ 高级运算 平均数运算 \overline{xyz}：$\overline{xyz}​$ 开二次方运算 \sqrt x：$\sqrt x$ 开方运算 \sqrt[3]{x+y}：$\sqrt[3]{x+y}$ 对数运算 \log(x)：$\log(x)​$ 极限运算 \lim^{}_{}{}： \lim^{x \to \infty}_{y \to 0}{f(x,y)} $\lim^{x \to \infty}_{y \to 0}{f(x,y)}​$ 极限运算 \displaystyle \lim^{}_{}{}： \displaystyle \lim^{x \to \infty}_{y \to 0}{f(x,y)} $\displaystyle \lim^{x \to \infty}_{y \to 0}{f(x,y)}$ 求和运算 \sum^{}_{}{}： \sum^{x \to \infty}_{y \to 0}{f(x,y)} $\sum^{x \to \infty}_{y \to 0}{f(x,y)}​$ 求和运算 \displaystyle \sum^{}_{}{}： \displaystyle \sum^{x \to \infty}_{y \to 0}{f(x,y)} $\displaystyle \sum^{x \to \infty}_{y \to 0}{f(x,y)}$ 积分运算 \int^{}_{}{}： \int^{\infty}_{0}{xdx} $\int^{\infty}_{0}{xdx}$ 积分运算 \displaystyle \int： \displaystyle \int^{\infty}_{0}{xdx} $\displaystyle \int^{\infty}_{0}{xdx}$ 类似的符号还有： \prod^{}_{}{}：$\prod^{}_{}{}$ \iint^{}_{}{}：$\iint^{}_{}{}$ \bigcap^{}_{}{}：$\bigcap^{}_{}{}$ \bigcup^{}_{}{}：$\bigcup^{}_{}{}$ 微分运算 \partial x：$\partial x$ 矩阵表示 \begin{matrix}...\end{matrix}： 1234567\left[\begin&#123;matrix&#125; 1 &amp; 2 &amp; 3 \\ 4 &amp; 5 &amp; 6\end&#123;matrix&#125;\right]注:元素与元素间用 &amp; 分隔；行末用\\表示换行. \left[\begin{matrix} 1 & 2 & 3 \\ 4 & 5 & 6 \end{matrix}\right]逻辑运算 等于运算 =：$=$ 大于运算 &gt;：$&gt;$ 小于运算 &lt;：$&lt;​$ 大于等于运算 \geq：$\geq$ 小于等于运算 \leq：$\leq​$ 不等于运算 \neq：$\neq​$ 不大于等于运算 \ngeq：$\ngeq$ 或 \not\geq：$\not\geq$ 不小于等于运算 \nleq：$\nleq​$ 或 \not\leq：$\not\leq​$ 约等于运算 \approx：$\approx$ 恒定等于运算 \equiv：$\equiv​$ 集合运算 属于运算 \in：$\in$ 不属于运算 \notin：$\notin​$ 或 \not\in：$\not\in​$ 子集运算 \subset：$\subset​$ 与 \supset：$\supset​$ 真子集运算 \subseteq：$\subseteq$ 与 \supseteq：$\supseteq$ 非真子集运算 \subsetneq：$\subsetneq$ 与 \supsetneq：$\supsetneq$ 非子集运算 \not\subset：$\not\subset​$ 与\not\supset：$\not\supset​$ 并集运算 \cup：$\cup$ 交集运算 \cap：$\cap$ 差集运算 \setminus：$\setminus$ 同或运算 \bigodot：$\bigodot$ 同与运算 \bigotimes：$\bigotimes$ 实数集合 \mathbb{R}：$\mathbb{R}$ 自然数集合 \mathbb{Z}：$\mathbb{Z}$ 空集 \emptyset：$\emptyset$ 常用 \varnothing：$\varnothing$ 数学符号 无穷 \infty：$\infty$ \imath：$\imath$ (带点的$i$就是字母i​) \jmath：$\jmath$ (带点的$j​$就是字母j) \hat{a}：$\hat{a}$ \breve{a}：$\breve{a}​$ \tilde{a}：$\tilde{a}$ \mathring{a}：$\mathring{a}$ \dot{a}：$\dot{a}$ \ddot{a}：$\ddot{a}$ \bar{a}：$\bar{a}$ \acute{a}：$\acute{a}$ \check{a}：$\check{a}$ \grave{a}：$\grave{a}$ 矢量符号 \vec{a}：$\vec{a}$ 上箭头 \uparrow：$\uparrow$ 双上箭头 \Uparrow：$\Uparrow$ 下箭头 \downarrow：$\downarrow$ 双下箭头 \Downarrow：$\Downarrow$ 左箭头 \leftarrow：$\leftarrow$ 双左箭头 \Leftarrow：$\Leftarrow$ 右箭头 \rightarrow：$\rightarrow$ 双右箭头 \Rightarrow：$\Rightarrow$ 双向箭头 \leftrightarrow：$\leftrightarrow$ 双双向箭头 \Leftrightarrow：$\Leftrightarrow$ 底端对齐的省略号 \ldots：$\ldots$ 中线对齐的省略号 \cdots：$\cdots$ 竖直对齐的省略号 \vdots：$\vdots​$ 斜对齐的省略号 \ddots：$\ddots​$ 希腊字母 大写字母 代码 小写字母 代码 $\mathrm{A}$ \mathrm{A} $\alpha$ \alhpa $\mathrm{B}$ \mathrm{B} $\beta$ \beta $\Gamma$ \Gamma $\gamma$ \gamma $\Delta$ \Delta $\delta$ \delta $\mathrm{E}$ \mathrm{E} $\epsilon$ \epsilon $\mathrm{Z}$ \mathrm{Z} $\zeta$ \zeta $\mathrm{H}$ \mathrm{H} $\eta$ \eta $\Theta$ \Theta $\theta$ \theta $\mathrm{I}$ \mathrm{I} $\iota$ \iota $\mathrm{K}$ \mathrm{K} $\kappa$ \kappa $\Lambda$ \Lambda $\lambda$ \lambda $\mathrm{M}$ \mathrm{M} $\mu$ \mu $\mathrm{N}$ \mathrm{N} $\nu$ \nu $\Xi$ \Xi $\xi$ \xi $\mathrm{O}$ \mathrm{O} $\omicron$ \omicron $\Pi$ \Pi $\pi$ \pi $\mathrm{P}$ \mathrm{P} $\rho$ \rho $\Sigma$ \Sigma $\sigma$ \sigma $\mathrm{T}$ \mathrm{T} $\tau$ \tau $\Upsilon$ \Upsilon $\upsilon$ \upsilon $\Phi$ \Phi $\phi$ \phi $\mathrm{X}$ \mathrm{X} $\chi$ \chi $\Psi$ \Psi $\psi$ \psi $\Omega$ \Omega $\omega$ \omega 注：大写希腊字母alhpa、beta、epsilon、zeta、eta、iota、kappa、mu、nu、omicron、rho、tau、chi无法正常转义，用大写罗马字体西文字母A、B、E、Z、H、I、K、M、N、O、P、T、X代替（字形完全一致）]]></content>
      <categories>
        <category>建站相关</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Markdown的基本书写规范]]></title>
    <url>%2F2019%2F02%2F10%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Hello world ！ 博客刚刚建成，代码托管于GitHub，博客引擎Hexo，主题引擎NexT 博客文章用Markdown书写，由Hexo引擎渲染 在这写一下Markdown的书写规范，供参考 ·斜体&amp;粗体1234*斜体***粗体*****粗斜体***~~删除线~~ 斜体粗体粗斜体删除线 ·分级标题123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 二级标题三级标题四级标题五级标题六级标题注意：# 后面有个空格 ·超链接行内式123[链接文字](链接地址 "链接标题")例：[盘盘](https://pan.ottoli.cn "小盘盘") 盘盘 参考式12345[链接文字][链接标记][链接标记]:链接地址 "链接标题"例：[Google][1]是个404小网站，但是[谷歌][1]在某些国家提供了优质的服务。[1]:https://www.google.com "google" Google是个404小网站，但是谷歌在某些国家提供了优质的服务。 自动链接12&lt;https://www.ottoli.cn&gt;&lt;ottoli@ottoli.cn&gt; https://www.ottoli.cn&#111;&#116;&#116;&#x6f;&#x6c;&#105;&#x40;&#x6f;&#116;&#116;&#x6f;&#x6c;&#105;&#x2e;&#99;&#x6e; 锚点1234首先在锚点位置(html)：&lt;div id="锚点id"&gt;&lt;/div&gt;然后在需要引用锚点的位置：[链接文字](#锚点id) 例： 在这篇文章第一段后： 然后在这里： 1[asddfdf](#asddfdf) asddfdf ·列表无序列表用* 或+ 或- 表示无序列表 123* AAA* BBB* CCC AAA BBB CCC 有序列表1231.AAA2.BBB3.CCC 1.AAA2.BBB3.CCC ·引用12&gt;AAA&gt;BBB AAABBB 12&gt;AAABBB AAABBB 123&gt;AAA&gt;&gt;BBB&gt;&gt;&gt;CCC AAA BBB CCC ·图片123![图片名](图片地址 "图片标签")例：![gaki](http://http://b-ssl.duitang.com/uploads/item/201504/09/20150409H5609_CG4j2.jpeg "新垣结衣") ·LaTeX公式行内公式123$LaTeX公式$例：二次函数的判别式为$\Delta=\sqrt&#123;b^2-4ac&#125;$ 二次函数的判别式为$\Delta=\sqrt{b^2-4ac}​$ 单行公式1$$\displaystyle \int^&#123;\infty&#125;_&#123;0&#125;f(x)dx=F(x)|^&#123;\infty&#125;_&#123;0&#125;$$ \displaystyle \int^{\infty}_{0}f(x)dx=F(x)|^{\infty}_{0}​·表格1234姓名|语文|数学|英语-|:-|:-:|-:张三|97|99|98李四|76|61|30 姓名 语文 数学 英语 张三 97 99 98 李四 76 61 30 ·分割线12345* * *********- - ------------------ （推荐写三个星号） ·代码行内式1在句子中有一个`code`哈哈哈哈 在句子中有一个code哈哈哈哈 一大坨式123&lt;三个`&gt;code&lt;三个`&gt; 1code HTML原始码例如上面锚点中使用的就是HTML ·Note标签*123&#123;% note %&#125;test&#123;% endnote %&#125; test 123&#123;% note default %&#125;test&#123;% endnote %&#125; test 123&#123;% note primary %&#125;test&#123;% endnote %&#125; test 123&#123;% note info %&#125;test&#123;% endnote %&#125; test 123&#123;% note success %&#125;test&#123;% endnote %&#125; test 123&#123;% note warning %&#125;test&#123;% endnote %&#125; test 123&#123;% note danger %&#125;test&#123;% endnote %&#125; test 不带图标的例子（只举一个） 123&#123;% note default no-icon %&#125;test&#123;% endnote %&#125; test ·按钮*123456789101112&#123;% button url, text, icon [class], [title] %&#125;&lt;或&gt;&#123;% btn url, text, icon [class], [title] %&#125;url : 链接或相对路径text : 按钮显示文本，如果没设置图标，必须要设置文本icon : FontAwesome图标，不需要加前面的fa-,如果没设置文本，必须要设置图标[class]* : FontAwesome class(es) 可选项： fa-fw | fa-lg | fa-2x | fa-3x | fa-4x | fa-5x[title]* : 鼠标悬停时显示的文本*可选参数 例子： 1&#123;% btn https://www.ottoli.cn, 主页 %&#125; 主页 1&#123;% btn https://www.ottoli.cn,, home fa-5x %&#125; 1&#123;% btn https://www.ottoli.cn, 主页 , home %&#125; 主页 ·行内标签*12&#123;% label [class]@Text %&#125;[class] : 可选项default | primary | success | info | warning | danger. 例子： 123这有一只&#123;% label @黑色的猫 %&#125;在卖萌&lt;或&gt;这有一只&#123;% label default@黑色的猫 %&#125;在卖萌 这有一只黑色的猫在卖萌 1这有一只&#123;% label primary@紫色的猫 %&#125;在卖萌 这有一只紫色的猫在卖萌 1这有一只&#123;% label success@绿色的猫 %&#125;在卖萌 这有一只绿色的猫在卖萌 1这有一只&#123;% label info@蓝色的猫 %&#125;在卖萌 这有一只蓝色的猫在卖萌 1这有一只&#123;% label warning@黄色的猫 %&#125;在卖萌 这有一只黄色的猫在卖萌 1这有一只&#123;% label danger@红色的猫 %&#125;在卖萌 这有一只红色的猫在卖萌 ·引用块*123&#123;% blockquote %&#125;A famous man once said, "we create our own demons." Who said that? What does that even mean? Doesn't matter. I said it cause he said it. So, now, he was famous and it's basically getting said by two well-known guys.&#123;% endblockquote %&#125; A famous man once said, “we create our own demons.” Who said that? What does that even mean? Doesn’t matter. I said it cause he said it. So, now, he was famous and it’s basically getting said by two well-known guys. 123&#123;% blockquote Tony Stark, Iron Man 3 %&#125;A famous man once said, "we create our own demons." Who said that? What does that even mean? Doesn't matter. I said it cause he said it. So, now, he was famous and it's basically getting said by two well-known guys.&#123;% endblockquote %&#125; A famous man once said, “we create our own demons.” Who said that? What does that even mean? Doesn’t matter. I said it cause he said it. So, now, he was famous and it’s basically getting said by two well-known guys. Tony StarkIron Man 3 1234567891011&#123;% centerquote %&#125;A famous man once said, "we create our own demons." Who said that? What does that even mean? Doesn't matter. I said it cause he said it. So, now, he was famous and it's basically getting said by two well-known guys.——Tony Stark&#123;% endcenterquote %&#125;&lt;or&gt;&#123;% cq %&#125;A famous man once said, "we create our own demons." Who said that? What does that even mean? Doesn't matter. I said it cause he said it. So, now, he was famous and it's basically getting said by two well-known guys.——Tony Stark&#123;% endcq %&#125; A famous man once said, “we create our own demons.” Who said that? What does that even mean? Doesn’t matter. I said it cause he said it. So, now, he was famous and it’s basically getting said by two well-known guys.——Tony Stark *这不是标准的Markdown语法，而是博客引擎中包含的标签插件（Tag Plugins） 注：本篇文章内容借鉴LixT’s Blog]]></content>
      <categories>
        <category>建站相关</category>
      </categories>
  </entry>
</search>
